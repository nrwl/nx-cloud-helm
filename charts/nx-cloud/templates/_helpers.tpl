{{/*
The following label/annotation helpers are just the basic ones you get from your
first `helm init` slightly modified for our own names and patterns
*/}}

{{- define "nxCloud.app.name" }}
{{- default .Chart.Name .Values.naming.nameOverride | trunc 63 | trimSuffix "-" }}
{{- end }}

{{- define "nxCloud.app.fullName" }}
{{- if .Values.naming.fullNameOverride }}
{{- .Values.naming.fullNameOverride | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- $name := default .Chart.Name .Values.naming.nameOverride }}
{{- if contains $name .Release.Name }}
{{- .Release.Name | trunc 63 | trimSuffix "-" }}
{{- else }}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
{{- end }}
{{- end }}
{{- end }}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "nxCloud.app.chartName" }}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
{{- end }}

{/*
Common labels
*/}}
{{- define "nxCloud.app.labels" }}
helm.sh/chart: {{ include "nxCloud.app.chartName" . }}
{{- include "nxCloud.app.selectorLabels" . }}
{{- if .Chart.AppVersion }}
app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
{{- end }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- end }}

{{/*
Selector labels
*/}}
{{- define "nxCloud.app.selectorLabels" }}
app.kubernetes.io/name: {{ include "nxCloud.app.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}

{{/*
Below are various little env snippets that multiple mainifests make use of
*/}}

{{- define "nxCloud.env.mode" }}
{{- if .Values.mode }}
- name: NX_CLOUD_MODE
  value: {{ .Values.mode | quote }}
{{- end }}
{{- end }}

{{- define "nxCloud.env.mongoSecrets" }}
{{- if (.Values.mongo).useAutoGeneratedOperatorSecret }}
- name: NX_CLOUD_MONGO_SERVER_ENDPOINT
  valueFrom:
    secretKeyRef:
      name: 'mongosecret'
      key: 'NX_CLOUD_MONGO_SERVER_ENDPOINT'
{{- else if .Values.secret.name }}
- name: NX_CLOUD_MONGO_SERVER_ENDPOINT
  valueFrom:
    secretKeyRef:
      name: {{ .Values.secret.name }}
      key: {{ .Values.secret.nxCloudMongoServerEndpoint }}
{{- end }}
{{- end }}

{{- define "nxCloud.env.nxCloudAppUrl" }}
- name: NX_CLOUD_APP_URL
  value: {{ .Values.nxCloudAppURL }}
{{- end }}

{{- define "nxCloud.env.verboseLogging" }}
{{- if .Values.verboseLogging }}
- name: NX_VERBOSE_LOGGING
  value: 'true'
- name: NX_API_LOG_LEVEL
  value: 'DEBUG'
{{- end }}
{{- end }}

{{- define "nxCloud.env.verboseMongoLogging" }}
{{- if .Values.verboseMongoLogging }}
- name: NX_MONGO_LOG_LEVEL
  value: 'DEBUG'
{{- end }}
{{- end }}

{{- define "nxCloud.workflows.serviceTarget" }}
{{- if .Values.nxCloudWorkflows.enabled}}
{{- if eq .Values.nxCloudWorkflows.externalName ""}}
- name: NX_CLOUD_WORKFLOW_CONTROLLER_ADDRESS
  value: http://{{ .Values.nxCloudWorkflows.name }}.{{ .Values.nxCloudWorkflows.workflowsNamespace }}.svc.cluster.local:{{ .Values.nxCloudWorkflows.port }}
- name: NX_CLOUD_CI_SERVER_ADDRESS
  value: http://{{ .Values.nxCloudWorkflows.name }}.{{ .Values.nxCloudWorkflows.workflowsNamespace }}.svc.cluster.local:{{ .Values.nxCloudWorkflows.port }}
{{- else }}
- name: NX_CLOUD_WORKFLOW_CONTROLLER_ADDRESS
  value: http://{{ .Values.nxCloudWorkflows.name }}:{{ .Values.nxCloudWorkflows.port }}
- name: NX_CLOUD_CI_SERVER_ADDRESS
  value: http://{{ .Values.nxCloudWorkflows.name }}:{{ .Values.nxCloudWorkflows.port }}
{{- end }}
{{- end }}
{{- end }}

{{- define "nxCloud.frontend.nxApiTarget" }}
- name: NX_API_INTERNAL_PORT
  value: '4203'
- name: NX_API_INTERNAL_BASE_URL
  value: http://nx-cloud-nx-api-service
{{- end }}

{{/*
Volume Mounts Helper - combines standard mounts with custom mounts from values
Usage: {{ include "nxCloud.volumeMounts" (dict "component" .Values.componentName "selfSigned" .Values.selfSignedCertConfigMap "resourceClass" (and .Values.resourceClassConfiguration.name .Values.resourceClassConfiguration.path)) }}
*/}}
{{- define "nxCloud.volumeMounts" -}}
{{- $component := .component -}}
{{- $selfSigned := .selfSigned -}}
{{- $resourceClass := .resourceClass -}}
{{- $hasCustomMounts := false -}}
{{- if $component.deployment -}}
  {{- if $component.deployment.volumeMounts -}}
    {{- $hasCustomMounts = true -}}
  {{- end -}}
{{- else if $component.volumeMounts -}}
  {{- $hasCustomMounts = true -}}
{{- end -}}

{{- if or $selfSigned $resourceClass $hasCustomMounts }}
volumeMounts:
  {{- if $selfSigned }}
  - mountPath: /usr/lib/jvm/java-17-amazon-corretto/jre/lib/security
    name: cacerts
    subPath: security
  - mountPath: /self-signed-certs
    name: self-signed-certs-volume
  {{- end }}
  {{- if $resourceClass }}
  - mountPath: /opt/nx-cloud/resource-classes
    name: resource-class-config-volume
  {{- end }}
  {{- if $component.deployment }}
    {{- if $component.deployment.volumeMounts }}
      {{- toYaml $component.deployment.volumeMounts | nindent 2 }}
    {{- end }}
  {{- else if $component.volumeMounts }}
    {{- toYaml $component.volumeMounts | nindent 2 }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
Volumes Helper - combines standard volumes with custom volumes from values
Usage: {{ include "nxCloud.volumes" (dict "component" .Values.componentName "selfSigned" .Values.selfSignedCertConfigMap "resourceClass" (and .Values.resourceClassConfiguration.name .Values.resourceClassConfiguration.path) "resourceClassConfig" .Values.resourceClassConfiguration) }}
*/}}
{{- define "nxCloud.volumes" -}}
{{- $component := .component -}}
{{- $selfSigned := .selfSigned -}}
{{- $resourceClass := .resourceClass -}}
{{- $resourceClassConfig := .resourceClassConfig -}}
{{- $hasCustomVolumes := false -}}
{{- if $component.deployment -}}
  {{- if $component.deployment.volumes -}}
    {{- $hasCustomVolumes = true -}}
  {{- end -}}
{{- else if $component.volumes -}}
  {{- $hasCustomVolumes = true -}}
{{- end -}}

{{- if or $selfSigned $resourceClass $hasCustomVolumes }}
volumes:
  {{- if $selfSigned }}
  - emptyDir: {}
    name: cacerts
  - configMap:
      name: {{ default $selfSigned .Values.preBuiltJavaCertStoreConfigMap }}
    name: self-signed-certs-volume
  {{- end }}
  {{- if $resourceClass }}
  - configMap:
      name: {{ $resourceClassConfig.name }}
      items:
        - key: {{ $resourceClassConfig.path }}
          path: agentConfigs.yaml
    name: resource-class-config-volume
  {{- end }}
  {{- if $component.deployment }}
    {{- if $component.deployment.volumes }}
      {{- toYaml $component.deployment.volumes | nindent 2 }}
    {{- end }}
  {{- else if $component.volumes }}
    {{- toYaml $component.volumes | nindent 2 }}
  {{- end }}
{{- end }}
{{- end -}}