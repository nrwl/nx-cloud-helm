{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "NX Cloud Helm Chart Values",
  "description": "JSON schema for NX Cloud Helm chart values.yaml file",
  "type": "object",
  "properties": {
    "global": {
      "type": "object",
      "description": "Global configuration values",
      "properties": {
        "labels": {
          "type": "object",
          "description": "Global labels to apply to all resources",
          "additionalProperties": {
            "type": "string"
          }
        },
        "imageTag": {
          "type": "string",
          "description": "Global image tag for all NX Cloud components",
          "pattern": "^[0-9]{4}\\.[0-9]{2}\\.[0-9]+(\\.[a-zA-Z0-9-]+)*$"
        },
        "imagePullPolicy": {
          "type": "string",
          "description": "Global image pull policy",
          "enum": ["Always", "IfNotPresent", "Never"]
        },
        "imagePullSecrets": {
          "type": "array",
          "description": "Global image pull secrets",
          "items": {
            "type": "string"
          }
        },
        "verboseLogging": {
          "type": "boolean",
          "description": "Enable verbose logging globally"
        },
        "logLevel": {
          "type": "string",
          "description": "Global log level",
          "enum": ["DEBUG", "INFO", "WARN", "ERROR"]
        },
        "nxCloudAppURL": {
          "type": "string",
          "description": "NX Cloud application URL",
          "format": "uri"
        },
        "mongodbConnectionString": {
          "type": "object",
          "description": "MongoDB connection string configuration",
          "properties": {
            "secretName": {
              "type": "string",
              "description": "Name of the secret containing the MongoDB connection string"
            },
            "secretKey": {
              "type": "string",
              "description": "Key within the secret containing the MongoDB connection string"
            }
          },
          "required": ["secretName", "secretKey"]
        }
      },
      "required": ["nxCloudAppURL"]
    },
    "config": {
      "type": "object",
      "description": "Configuration settings",
      "properties": {
        "agentConfigs": {
          "type": "string",
          "description": "Agent configuration string"
        }
      }
    },
    "ingress": {
      "type": "object",
      "description": "Ingress configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable ingress"
        },
        "annotations": {
          "type": "object",
          "description": "Ingress annotations",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "description": "Ingress labels",
          "additionalProperties": {
            "type": "string"
          }
        },
        "className": {
          "type": "string",
          "description": "Ingress class name"
        },
        "host": {
          "type": "string",
          "description": "Ingress hostname"
        },
        "tls": {
          "type": "object",
          "description": "TLS configuration",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable TLS"
            },
            "secretName": {
              "type": "string",
              "description": "TLS secret name"
            },
            "hosts": {
              "type": "array",
              "description": "TLS hosts",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalPaths": {
          "type": "array",
          "description": "Additional ingress paths",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              },
              "pathType": {
                "type": "string",
                "enum": ["Exact", "Prefix", "ImplementationSpecific"]
              },
              "backend": {
                "type": "object",
                "properties": {
                  "service": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "port": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 65535
                          }
                        },
                        "required": ["number"]
                      }
                    },
                    "required": ["name", "port"]
                  }
                },
                "required": ["service"]
              }
            },
            "required": ["path", "pathType", "backend"]
          }
        }
      }
    },
    "fileServer": {
      "type": "object",
      "description": "File server configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable file server"
        },
        "verboseLogging": {
          "type": "boolean",
          "description": "Enable verbose logging for file server"
        },
        "logLevel": {
          "type": "string",
          "description": "File server log level",
          "enum": ["DEBUG", "INFO", "WARN", "ERROR"]
        },
        "image": {
          "$ref": "#/definitions/imageConfig"
        },
        "service": {
          "$ref": "#/definitions/serviceConfig"
        },
        "deployment": {
          "$ref": "#/definitions/deploymentConfig"
        },
        "pvc": {
          "$ref": "#/definitions/pvcConfig"
        },
        "serviceAccount": {
          "$ref": "#/definitions/serviceAccountConfig"
        }
      }
    },
    "aggregator": {
      "type": "object",
      "description": "Aggregator configuration",
      "properties": {
        "verboseLogging": {
          "type": "boolean",
          "description": "Enable verbose logging for aggregator"
        },
        "logLevel": {
          "type": "string",
          "description": "Aggregator log level",
          "enum": ["DEBUG", "INFO", "WARN", "ERROR"]
        },
        "image": {
          "$ref": "#/definitions/imageConfig"
        },
        "cronjob": {
          "type": "object",
          "description": "Cronjob configuration",
          "properties": {
            "schedule": {
              "type": "string",
              "description": "Cron schedule",
              "pattern": "^(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|Âµs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+([/\\-])\\d+)|\\d+|\\*) ?){5,7})$"
            },
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "env": {
              "$ref": "#/definitions/envVars"
            },
            "envValueFrom": {
              "$ref": "#/definitions/envValueFrom"
            },
            "envFrom": {
              "$ref": "#/definitions/envFrom"
            },
            "securityContext": {
              "type": "object"
            },
            "affinity": {
              "type": "object"
            },
            "tolerations": {
              "type": "object"
            },
            "nodeSelector": {
              "type": "object"
            },
            "resources": {
              "$ref": "#/definitions/resources"
            },
            "volumes": {
              "type": "array"
            },
            "volumeMounts": {
              "type": "array"
            }
          },
          "required": ["schedule"]
        },
        "serviceAccount": {
          "$ref": "#/definitions/serviceAccountConfig"
        },
        "secret": {
          "type": "object",
          "properties": {
            "create": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "frontend": {
      "type": "object",
      "description": "Frontend configuration",
      "properties": {
        "verboseLogging": {
          "type": "boolean",
          "description": "Enable verbose logging for frontend"
        },
        "logLevel": {
          "type": "string",
          "description": "Frontend log level",
          "enum": ["DEBUG", "INFO", "WARN", "ERROR"]
        },
        "image": {
          "$ref": "#/definitions/imageConfig"
        },
        "service": {
          "$ref": "#/definitions/serviceConfig"
        },
        "deployment": {
          "$ref": "#/definitions/deploymentConfig"
        },
        "serviceAccount": {
          "$ref": "#/definitions/serviceAccountConfig"
        }
      }
    },
    "api": {
      "type": "object",
      "description": "API configuration",
      "properties": {
        "verboseLogging": {
          "type": "boolean",
          "description": "Enable verbose logging for API"
        },
        "logLevel": {
          "type": "string",
          "description": "API log level",
          "enum": ["DEBUG", "INFO", "WARN", "ERROR"]
        },
        "image": {
          "$ref": "#/definitions/imageConfig"
        },
        "service": {
          "$ref": "#/definitions/serviceConfig"
        },
        "deployment": {
          "$ref": "#/definitions/deploymentConfig"
        },
        "serviceAccount": {
          "$ref": "#/definitions/serviceAccountConfig"
        }
      }
    },
    "workflowController": {
      "type": "object",
      "description": "Workflow controller configuration",
      "properties": {
        "service": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "name": {
              "type": "string"
            },
            "annotations": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "labels": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "externalName": {
              "type": "string"
            },
            "port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535
            },
            "headless": {
              "type": "boolean"
            }
          },
          "required": ["enabled"]
        }
      }
    },
    "extraObjects": {
      "type": "object",
      "description": "Extra Kubernetes objects to create",
      "items": {
        "type": "object"
      }
    }
  },
  "definitions": {
    "imageConfig": {
      "type": "object",
      "description": "Container image configuration",
      "properties": {
        "repository": {
          "type": "string",
          "description": "Image repository"
        },
        "tag": {
          "type": "string",
          "description": "Image tag"
        },
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy",
          "enum": ["Always", "IfNotPresent", "Never", ""]
        }
      },
      "required": ["repository", "tag"]
    },
    "serviceConfig": {
      "type": "object",
      "description": "Kubernetes service configuration",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"]
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        }
      },
      "required": ["name", "type", "port"]
    },
    "deploymentConfig": {
      "type": "object",
      "description": "Kubernetes deployment configuration",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "replicas": {
          "type": "integer",
          "minimum": 0
        },
        "port": {
          "type": "integer",
          "minimum": 1,
          "maximum": 65535
        },
        "env": {
          "$ref": "#/definitions/envVars"
        },
        "envValueFrom": {
          "$ref": "#/definitions/envValueFrom"
        },
        "strategy": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": ["RollingUpdate", "Recreate"]
            },
            "rollingUpdate": {
              "type": "object",
              "properties": {
                "maxUnavailable": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "pattern": "^\\d+%$"
                    }
                  ]
                },
                "maxSurge": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "type": "string",
                      "pattern": "^\\d+%$"
                    }
                  ]
                }
              }
            }
          }
        },
        "envFrom": {
          "$ref": "#/definitions/envFrom"
        },
        "securityContext": {
          "type": "object"
        },
        "affinity": {
          "type": "object"
        },
        "tolerations": {
          "type": "object"
        },
        "nodeSelector": {
          "type": "object"
        },
        "resources": {
          "$ref": "#/definitions/resources"
        },
        "volumes": {
          "type": "array"
        },
        "volumeMounts": {
          "type": "array"
        }
      },
      "required": ["port"]
    },
    "pvcConfig": {
      "type": "object",
      "description": "Persistent Volume Claim configuration",
      "properties": {
        "name": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "storageClassName": {
          "type": "string"
        },
        "size": {
          "type": "string",
          "pattern": "^\\d+(Ki|Mi|Gi|Ti|Pi|Ei|m|k|M|G|T|P|E)?$"
        },
        "helmResourcePolicy": {
          "type": "string",
          "enum": ["keep", "delete"]
        }
      },
      "required": ["name", "size"]
    },
    "serviceAccountConfig": {
      "type": "object",
      "description": "Service Account configuration",
      "properties": {
        "create": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "automount": {
          "type": "boolean"
        }
      },
      "required": ["create", "name", "automount"]
    },
    "envVars": {
      "type": "object",
      "description": "Environment variables as key-value pairs",
      "additionalProperties": {
        "type": "string"
      }
    },
    "envValueFrom": {
      "type": "object",
      "description": "Environment variables with values from ConfigMaps, Secrets, etc.",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "configMapKeyRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            },
            "required": ["name", "key"]
          },
          "secretKeyRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            },
            "required": ["name", "key"]
          },
          "fieldRef": {
            "type": "object",
            "properties": {
              "fieldPath": {
                "type": "string"
              }
            },
            "required": ["fieldPath"]
          },
          "resourceFieldRef": {
            "type": "object",
            "properties": {
              "containerName": {
                "type": "string"
              },
              "resource": {
                "type": "string"
              }
            },
            "required": ["resource"]
          }
        }
      }
    },
    "envFrom": {
      "type": "array",
      "description": "Environment variables from ConfigMaps or Secrets",
      "items": {
        "type": "object",
        "properties": {
          "configMapRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": ["name"]
          },
          "secretRef": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": ["name"]
          }
        }
      }
    },
    "resources": {
      "type": "object",
      "description": "Resource requirements",
      "properties": {
        "limits": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string"
            },
            "memory": {
              "type": "string"
            }
          }
        },
        "requests": {
          "type": "object",
          "properties": {
            "cpu": {
              "type": "string"
            },
            "memory": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
